)
long_format <- Face_Body %>%
pivot_longer(
cols = c(Body_Hits, Face_Hits),
names_to = "Type",
values_to = "Count"
)
# Assuming your long format data frame is named 'long_format'
long_format <- long_format %>%
mutate(
x_axis = if_else(Type == "Face", 1, 2)
)
raincloud_2 <- raincloud_1x1_repmes(
data = long_format,
colors = (c('dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange')),
line_color = 'gray',
line_alpha = .3,
size = 1,
alpha = .6,
align_clouds = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Face", "Body"), limits=c(0, 3)) +
xlab("Time") +
ylab("Score") +
theme_classic()
raincloud_2
long_format <- Face_Body %>%
pivot_longer(
cols = c(Body_Hits, Face_Hits),
names_to = "Type",
values_to = "y_axis"
)
# Assuming your long format data frame is named 'long_format'
long_format <- long_format %>%
mutate(
x_axis = if_else(Type == "Face", 1, 2)
)
raincloud_2 <- raincloud_1x1_repmes(
data = long_format,
colors = (c('dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange')),
line_color = 'gray',
line_alpha = .3,
size = 1,
alpha = .6,
align_clouds = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Face", "Body"), limits=c(0, 3)) +
xlab("Time") +
ylab("Score") +
theme_classic()
raincloud_2
# Assuming your long format data frame is named 'long_format'
long_format <- long_format %>%
rename(jit = SubjectID) %>%
mutate(
x_axis = if_else(Type == "Face", 1, 2)
)
raincloud_2 <- raincloud_1x1_repmes(
data = long_format,
colors = (c('dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange')),
line_color = 'gray',
line_alpha = .3,
size = 1,
alpha = .6,
align_clouds = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Face", "Body"), limits=c(0, 3)) +
xlab("Time") +
ylab("Score") +
theme_classic()
raincloud_2
# Assuming your long format data frame is named 'long_format'
long_format <- long_format %>%
rename(id = SubjectID) %>%
mutate(
x_axis = if_else(Type == "Face", 1, 2)
)
library(dplyr)
# Assuming your data frame is named 'your_data_frame'
Face_Body <- df_2x2 %>%
group_by(SubjectID) %>%
summarize(
Body_Hits = sum(Face_Hits == "Body"),
Face_Hits = sum(Face_Hits == "Face")
)
long_format <- Face_Body %>%
pivot_longer(
cols = c(Body_Hits, Face_Hits),
names_to = "Type",
values_to = "y_axis"
)
# Assuming your long format data frame is named 'long_format'
long_format <- long_format %>%
rename(id = SubjectID) %>%
mutate(
x_axis = if_else(Type == "Face", 1, 2)
)
raincloud_2 <- raincloud_1x1_repmes(
data = long_format,
colors = (c('dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange')),
line_color = 'gray',
line_alpha = .3,
size = 1,
alpha = .6,
align_clouds = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Face", "Body"), limits=c(0, 3)) +
xlab("Time") +
ylab("Score") +
theme_classic()
raincloud_2
# Assuming your long format data frame is named 'long_format'
long_format <- long_format %>%
rename(id = SubjectID) %>%
mutate(
x_axis = if_else(Type == "Face", 1, 2),
jit = jitter(x_axis, amount = 0.5)
)
library(dplyr)
# Assuming your data frame is named 'your_data_frame'
Face_Body <- df_2x2 %>%
group_by(SubjectID) %>%
summarize(
Body_Hits = sum(Face_Hits == "Body"),
Face_Hits = sum(Face_Hits == "Face")
)
long_format <- Face_Body %>%
pivot_longer(
cols = c(Body_Hits, Face_Hits),
names_to = "Type",
values_to = "y_axis"
)
# Assuming your long format data frame is named 'long_format'
long_format <- long_format %>%
rename(id = SubjectID) %>%
mutate(
x_axis = if_else(Type == "Face", 1, 2),
jit = jitter(x_axis, amount = 0.5)
)
raincloud_2 <- raincloud_1x1_repmes(
data = long_format,
colors = (c('dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange')),
line_color = 'gray',
line_alpha = .3,
size = 1,
alpha = .6,
align_clouds = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Face", "Body"), limits=c(0, 3)) +
xlab("Time") +
ylab("Score") +
theme_classic()
raincloud_2
View(long_format)
if (!require(remotes)) {
install.packages("remotes")
}
remotes::install_github('jorvlan/raincloudplots')
library(raincloudplots)
w_package = 3
h_package = 6
# Load required packages
library_packages <- c(
"dplyr", "tidyr"
)
lapply(library_packages, library, character.only = TRUE)
df_2x2 <-read.csv("/Volumes/TwoTeras/0_Experiment_1/Eye_Tracking/Pre_processed/Data_Sets/Complete_Data_AngularV_NO_Outliers.cvs")
df_2x2_spread <- data_2x2(
array_1 = iris$Sepal.Length[1:50],
array_2 = iris$Sepal.Length[51:100],
array_3 = iris$Sepal.Length[101:150],
array_4 = iris$Sepal.Length[81:130],
labels = (c('congruent','incongruent')),
jit_distance = .09,
jit_seed = 321,
spread_x_ticks = TRUE)
raincloud_2x2_spread <- raincloud_2x2_repmes(
data = df_2x2_spread,
colors = (c('dodgerblue', 'darkorange', 'dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange', 'dodgerblue', 'darkorange')),
line_color = 'gray',
line_alpha = .3,
size = 1,
alpha = .6,
spread_x_ticks = TRUE) +
scale_x_continuous(breaks=c(1,2,3,4), labels=c("Pre", "Post", "Pre", "Post"), limits=c(0, 5)) +
xlab("Time") +
ylab("Score") +
theme_classic()
raincloud_2x2_spread
raincloud_2x2_spread <- raincloud_2x2_repmes(
data = df_2x2_spread,
colors = (c('dodgerblue', 'darkorange', 'dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange', 'dodgerblue', 'darkorange')),
line_color = 'gray',
line_alpha = .3,
size = 1,
alpha = .6,
spread_x_ticks = TRUE) +
scale_x_continuous(breaks=c(1,2,3,4), labels=c("Pre", "Post", "Pre", "Post"), limits=c(0, 5)) +
xlab("Time") +
ylab("Score") +
theme_classic()
raincloud_2x2_spread
df_1x1 <- data_1x1(
array_1 = iris$Sepal.Length[1:50],
array_2 = iris$Sepal.Length[51:100],
jit_distance = .09,
jit_seed = 321)
df_1x1
library(dplyr)
# Assuming your data frame is named 'your_data_frame'
Face_Body <- df_2x2 %>%
group_by(SubjectID) %>%
summarize(
Body_Hits = sum(Face_Hits == "Body"),
Face_Hits = sum(Face_Hits == "Face")
)
long_format <- Face_Body %>%
pivot_longer(
cols = c(Body_Hits, Face_Hits),
names_to = "Type",
values_to = "y_axis"
)
# Assuming your long format data frame is named 'long_format'
long_format <- long_format %>%
rename(id = SubjectID) %>%
mutate(
x_axis = if_else(Type == "Face", 1, 2),
jit = jitter(x_axis, amount = 0.5)
)
raincloud_2 <- raincloud_1x1_repmes(
data = long_format,
colors = (c('dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange')),
line_color = 'gray',
line_alpha = .3,
size = 1,
alpha = .6,
align_clouds = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Face", "Body"), limits=c(0, 3)) +
xlab("Time") +
ylab("Score") +
theme_classic()
raincloud_2
raincloud_2 <- raincloud_1x1_repmes(
data = df_1x1,
colors = (c('dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange')),
line_color = 'gray',
line_alpha = .3,
size = 1,
alpha = .6,
align_clouds = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Pre", "Post"), limits=c(0, 3)) +
xlab("Time") +
ylab("Score") +
theme_classic()
raincloud_2
plot(pressure)
# Assuming your long format data frame is named 'long_format'
long_format <- long_format %>%
rename(id = SubjectID) %>%
mutate(
x_axis = if_else(Type == "Face", 1, 2),
jit = jitter(x_axis, amount = 0.5)
)
long_format <- Face_Body %>%
pivot_longer(
cols = c(Body_Hits, Face_Hits),
names_to = "Type",
values_to = "y_axis"
)
library(dplyr)
# Assuming your data frame is named 'your_data_frame'
Face_Body <- df_2x2 %>%
group_by(SubjectID) %>%
summarize(
Body_Hits = sum(Face_Hits == "Body"),
Face_Hits = sum(Face_Hits == "Face")
)
long_format <- Face_Body %>%
pivot_longer(
cols = c(Body_Hits, Face_Hits),
names_to = "Type",
values_to = "y_axis"
)
# Assuming your long format data frame is named 'long_format'
long_format <- long_format %>%
rename(id = SubjectID) %>%
mutate(
x_axis = if_else(Type == "Face", 1, 2),
jit = jitter(x_axis, amount = 0.5)
)
raincloud_2 <- raincloud_1x1_repmes(
data = long_format,
colors = (c('dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange')),
line_color = 'gray',
line_alpha = .3,
size = 1,
alpha = .6,
align_clouds = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Face", "Body"), limits=c(0, 3)) +
xlab("Time") +
ylab("Score") +
theme_classic()
raincloud_2
View(long_format)
library(dplyr)
# Assuming your data frame is named 'your_data_frame'
Face_Body <- df_2x2 %>%
group_by(SubjectID) %>%
summarize(
Body_Hits = sum(Face_Hits == "Body"),
Face_Hits = sum(Face_Hits == "Face")
)
long_format <- Face_Body %>%
pivot_longer(
cols = c(Body_Hits, Face_Hits),
names_to = "Type",
values_to = "y_axis"
)
# Assuming your long format data frame is named 'long_format'
long_format <- long_format %>%
rename(id = SubjectID) %>%
mutate(
x_axis = if_else(Type == "Face_Hits", 1, 2),
jit = jitter(x_axis, amount = 0.1)
)
raincloud_2 <- raincloud_1x1_repmes(
data = long_format,
colors = (c('dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange')),
line_color = 'gray',
line_alpha = .3,
size = 1,
alpha = .6,
align_clouds = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Face", "Body"), limits=c(0, 3)) +
xlab("Time") +
ylab("Score") +
theme_classic()
raincloud_2
raincloud_2 <- raincloud_1x1_repmes(
data = long_format,
colors = (c('dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange')),
line_color = 'gray',
line_alpha = .3,
size = 1,
alpha = .6,
align_clouds = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Face", "Body"), limits=c(0, 3)) +
xlab("Gaze Collider Type") +
ylab("Number of Gazes") +
theme_classic()
raincloud_2
View(long_format)
View(Face_Body)
# Calculate Pearson correlation
correlation_result <- cor(Face_Body$Body_Hits, vector2$Face_Hits)
# Calculate Pearson correlation
correlation_result <- cor(Face_Body$Body_Hits, Face_Body$Face_Hits)
# Print the result
print(correlation_result)
install.packages("corrplot")
if (!require(remotes)) {
install.packages("remotes")
}
remotes::install_github('jorvlan/raincloudplots')
library(raincloudplots)
w_package = 3
h_package = 6
# Load required packages
library_packages <- c(
"dplyr", "tidyr", "corrplot", "ggplot2"
)
lapply(library_packages, library, character.only = TRUE)
raincloud_2 <- raincloud_1x1_repmes(
data = long_format,
colors = (c('dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange')),
line_color = 'gray',
line_alpha = .3,
size = 1,
alpha = .6,
align_clouds = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Face", "Body"), limits=c(0, 3)) +
xlab("Gaze Collider Type") +
ylab("Number of Gazes") +
theme_classic()
raincloud_2
# Assuming your data frame is named 'df' and the columns you want to plot are 'column1' and 'column2'
ggplot(data = df, aes(x = Body_Hits, y = Face_Hits)) +
geom_point() +
theme_minimal() +
labs(x = "Body_Hits 1", y = "Face_Hits 2", title = "Scatter Plot of Body_Hits vs Face_Hits")
# Assuming your data frame is named 'df' and the columns you want to plot are 'column1' and 'column2'
ggplot(data = Face_Body, aes(x = Body_Hits, y = Face_Hits)) +
geom_point() +
theme_minimal() +
labs(x = "Body_Hits 1", y = "Face_Hits 2", title = "Scatter Plot of Body_Hits vs Face_Hits")
# Calculate the correlation matrix
cor_matrix <- cor(Face_Body$Body_Hits, Face_Body$Face_Hits, use = "complete.obs")  # Adjust for handling NA values if needed
# Plot the correlation matrix
corrplot(cor_matrix, method = "circle")
cor_matrix
# Assuming your data frame is named 'df' and the columns you want to plot are 'column1' and 'column2'
ggplot(data = Face_Body, aes(x = Body_Hits, y = Face_Hits)) +
geom_point() +
theme_minimal() +
labs(x = "Body_Hits 1", y = "Face_Hits 2", title = "Scatter Plot of Body_Hits vs Face_Hits")
# Calculate the correlation matrix
cor_matrix <- cor(Face_Body$Body_Hits, Face_Body$Face_Hits, use = "complete.obs")  # Adjust for handling NA values if needed
cor_matrix
# Set global chunk options for R Markdown output
knitr::opts_chunk$set(comment = NA)  # Removes all hashtags from output in HTML
# Load required packages
library_packages <- c(
"readr", "dlookr", "dplyr", "lme4", "car", "emmeans", "MASS", "jtools",
"lmerTest", "gmodels", "nlme", "multcompView", "ggplot2", "sjPlot", "sjstats"
)
lapply(library_packages, library, character.only = TRUE)
install.packages("dlookr")
install.packages("dlookr")
install.packages("dlookr")
install.packages("dlookr")
install.packages("dlookr")
# Set global chunk options for R Markdown output
knitr::opts_chunk$set(comment = NA)  # Removes all hashtags from output in HTML
# Load required packages
library_packages <- c(
"readr", "dlookr", "dplyr", "lme4", "car", "emmeans", "MASS", "jtools",
"lmerTest", "gmodels", "nlme", "multcompView", "ggplot2", "sjPlot", "sjstats"
)
lapply(library_packages, library, character.only = TRUE)
# Set options for emmeans
emm_options(lmerTest.limit = 15000)
emm_options(pbkrtest.limit = 15000)
# Not scientific notation
options(scipen=999)
HumanA_Fixations <- read.csv("/Volumes/TwoTeras/2_DataSets_Experiments_1_2/BehavioralData_Fixations_Wide.csv", sep =",")
head(HumanA_Fixations)
library(dplyr)
HumanA_Fixations <- HumanA_Fixations %>%
# Recoding variables
mutate(
ContextEffect = case_when(
Context == "False" ~ -0.5,
Context == "True" ~ 0.5,
TRUE ~ NaN
),
AgentPresence = case_when(
AvatarPresenceCategory == "Omitted" ~ -0.5,
AvatarPresenceCategory == "Present" ~ 0.5,
TRUE ~ NaN
),
Agent_Action_level = case_when(
Agent_Category == "Passive" ~ -0.5,
Agent_Category == "Active" ~ 0.5,
TRUE ~ NaN
),
Experiment_effect = case_when(
Experiment == 1 ~ -0.5,
Experiment == 2 ~ 0.5,
TRUE ~ NaN
),
Match = ifelse(Experiment == 1 & ContextEffect == 0.5, 0.5,-0.5)
) %>%
# Convert numeric variables to factors
mutate(
ContextEffectf = factor(ContextEffect, levels = c(-0.5, 0.5), labels = c('Residential', 'Public')),
AgentPresencef = factor(AgentPresence, levels = c(-0.5, 0.5), labels = c('Omitted', 'Displayed')),
Agent_Action_levelf = factor(Agent_Action_level, levels = c(-0.5, 0.5), labels = c('Passive', 'Active')),
Matchf = factor(Match, levels = c(-0.5, 0.5), labels = c('Not Congruent', 'Congruent'))
)
df <- HumanA_Fixations %>%
filter(complete.cases(.))
p <- ggplot(df, aes(x = AbsolutError, fill = Agent_Action_levelf)) +
geom_histogram(aes(group = Agent_Action_levelf),
position = "identity",
alpha = 0.5,
binwidth = 10) +
facet_grid(cols = vars(ContextEffectf)) +
theme_bw()
# Print the plot
p
# Prepare the data: filter complete cases and round the AbsolutError variable
df <- HumanA_Fixations %>%
filter(complete.cases(.)) %>%
mutate(AbsolutErrorR = round(AbsolutError, digits = 3))
# Compare AbsolutErrorR to a normal distribution
qqp(df$AbsolutErrorR, "norm")
# Compare AbsolutErrorR to a log-normal distribution
qqp(df$AbsolutErrorR, "lnorm")
# Model with only intercept
interceptOnly <-gls(Dwelling_Time_Agent_Gaze ~ 1, data = df, method = "ML")
# Add ID as random intercept
IDrandomInterceptOnly <- lme(Dwelling_Time_Agent_Gaze ~ 1, random = ~1|SubjectID, method = "ML", data = df)
anova(interceptOnly, IDrandomInterceptOnly)
cat("Including Id  as random effect significantly improves the fit of the model\n")
IDrandomInterceptOnly <- lmer(Dwelling_Time_Agent_Gaze ~ 1 + (1|SubjectID),  data = df)
Gaze_Prediction <- update(IDrandomInterceptOnly,  .~. +  ContextEffect*Agent_Action_level + Experiment_effect)
summary(Gaze_Prediction,  scientific=FALSE)
# Gaze_Prediction_Building
IDrandomInterceptOnly <- lmer(Dwelling_Time_Building_Gaze ~ 1 + (1|SubjectID),  data = df)
Gaze_Prediction_Building <- update(IDrandomInterceptOnly,  .~. +  ContextEffect*Agent_Action_level + Experiment_effect)
summary(Gaze_Prediction_Building,  scientific=FALSE)
# Complete model with all predictors
Complete_model <- update(StartlocationsrandomIntercept,
. ~ . + Dwelling_Time_Building_Gaze + Dwelling_Time_Agent_Gaze + ContextEffect*Agent_Action_level + AgentPresence + Match)
